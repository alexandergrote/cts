import pandas as pd

from pydantic import BaseModel, field_validator

from src.fetch_data.base import BaseDataLoader
from src.util.caching import pickle_cache
from src.util.constants import Directory


class MalwareDataloader(BaseModel, BaseDataLoader):

    """
    Data taken from Angelo Schranko De Oliveira, Renato Jose Sassi . Behavioral Malware Detection using Deep Graph Convolutional Neural Networks. International Journal of Computer Applications. 174, 29 ( Apr 2021), 1-8. DOI=10.5120/ijca2021921218
    """

    path: str

    class Config:
        arbitrary_types_allowed=True

    @field_validator('path')
    def _set_path(cls, v):

        filepath = str(Directory.DATA / v)

        return filepath

    @pickle_cache(ignore_caching=True)
    def execute(self) -> dict:

        data = pd.read_csv(self.path)

        # assign id
        data['id'] = range(len(data))
        data = data.drop(columns=['hash'])

        # transform into desired format
        data = data.melt(id_vars=['id', 'malware'])
        data['time'] = data['variable'].str.split('_').str[1].astype(int)
        data['value'] = data['value'].astype(str)

        # get rid of the variable column and sort by hash and time for easier readability
        data = data.sort_values(by=['id', 'time'])
        data = data.drop(columns=['variable'])
        
        return {'event': data}


if __name__ == '__main__':

    ts_data = MalwareDataloader(
        path="dynamic_api_call_sequence_per_malware_100_0_306.csv"
    ).execute()

    print(ts_data)
