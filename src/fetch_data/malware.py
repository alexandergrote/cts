import pandas as pd

from pydantic import BaseModel, field_validator, ConfigDict
from typing import Optional
from imblearn.under_sampling import RandomUnderSampler

from src.fetch_data.base import BaseDataLoader
from src.util.caching import environ_pickle_cache
from src.util.constants import Directory
from src.util.datasets import Dataset, DatasetSchema


class MalwareDataloader(BaseModel, BaseDataLoader):

    """
    Data taken from Angelo Schranko De Oliveira, Renato Jose Sassi . Behavioral Malware Detection using Deep Graph Convolutional Neural Networks. International Journal of Computer Applications. 174, 29 ( Apr 2021), 1-8. DOI=10.5120/ijca2021921218
    """

    path: str
    resampling_fraction: Optional[float] = None
    n_samples: Optional[int] = None

    model_config = ConfigDict(arbitrary_types_allowed=True, extra='forbid')

    
    @field_validator('path')
    def _set_path(cls, v):

        filepath = str(Directory.DATA / v)

        return filepath

    @environ_pickle_cache()
    def get_data(self) -> Dataset:

        data = pd.read_csv(self.path)

        if self.n_samples is not None:
            data = data.sample(n=self.n_samples, random_state=42)

        # assign id
        data[DatasetSchema.id_column] = range(len(data))
        data = data.drop(columns=['hash'])

        # resample if argument is provided
        if self.resampling_fraction is not None:
            sampler = RandomUnderSampler(
                sampling_strategy=self.resampling_fraction,
                random_state=42
            )
            X, y = sampler.fit_resample(data.drop(columns=['malware']), data['malware'])
            data = pd.concat([X, y], axis=1)

        # transform into desired format
        data = data.melt(id_vars=[DatasetSchema.id_column, 'malware'])
        data[DatasetSchema.time_column] = data['variable'].str.split('_').str[1].astype(int)
        data['value'] = data['value'].astype(str)

        # get rid of the variable column and sort by hash and time for easier readability
        data = data.sort_values(by=[DatasetSchema.id_column, DatasetSchema.time_column])
        data = data.drop(columns=['variable'])

        data[DatasetSchema.time_column] = data[DatasetSchema.time_column].astype('int64')

        # rename columns to match DatasetSchema
        data.rename(columns={
            'value': DatasetSchema.event_column,
            'malware': DatasetSchema.class_column
        }, inplace=True)
        
        return data


if __name__ == '__main__':

    ts_data = MalwareDataloader(
        path="dynamic_api_call_sequence_per_malware_100_0_306.csv",
        n_samples=1000
    ).execute()

    print(ts_data)
